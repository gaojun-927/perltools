#! /bin/usr/perl -w
use strict;

my $input_cdl='TOP.cdl';
print "Please input cdl netlist name: \n";
chomp($input_cdl=<STDIN>);
$input_cdl=~s/^\s+//;
$input_cdl=~s/\s+$//;
my $top;
if ($input_cdl eq 'netlist' ){ $top='TOP';}
if ($input_cdl =~/(\w+)\.cdl/) {$top=$1;}
print "Please input top cell name($top?) : \n";
my $subckt='channel_one';
chomp($subckt=<STDIN>);
if ($subckt eq ''){
	$subckt=$top;
}
my $libhead;
my $cellhead;
my $clkname='clk';
my $pinhead="capacitance : 0.01 ;";
my $anahead;
my $timinginhead;
my $timingouthead;
my $notiminghead;
my $clkhead;


my $isdebug=1;
open FILE, "< $input_cdl"  or die "open $input_cdl error!\n";
my $flag=0;
my $subckt_head;
while(<FILE>){
	print $flag if $isdebug;
	if( /^\.SUBCKT $subckt/) {
		$flag=1;
		next;
	}
	elsif ( $flag==1 && /^\+/ ){
		next;
	}
	elsif ( $flag==1 && /^\*\.PININFO/ ){
		$subckt_head=$_;
		$flag=2;
		next;
	}
	elsif ( $flag==2 && /^\+/ ){
		$subckt_head.=$_;
		next;
	}
	elsif ( $flag==2 && !/^\+/) {
		last;
	}
	else { 
		$flag=0;		
		next;
	}
}
close FILE;
print $subckt_head."\n" if $isdebug;
if ($flag!=2) {die " Error, not find top cell\n";}
$subckt_head=~s/^\*\.PININFO/ /;
$subckt_head=~s/\n\+/ /g;
$subckt_head=~s/^\s+//;
$subckt_head=~s/\s+$//;
print $subckt_head if $isdebug;
my @subckt_head=split /\s+/, $subckt_head;
my %subckt;
my @pinlist;
foreach my $item (@subckt_head){
	print " ".$item."\n";
	$item=~s/^\s+//;
	$item=~s/\s+$//;
	my @name=split /:/, $item;
	if ($name[0] =~/(\w+)<(\d+)>/ ){
		$subckt{$1}->{'direction'}=$name[1];
		if (!exists( $subckt{$1}->{'min'} ) ){
			$subckt{$1}->{'min'}=$2;
			$subckt{$1}->{'max'}=$2;
			push(@pinlist,$1);
		}elsif( $subckt{$1}->{'min'} > $2 ){
			$subckt{$1}->{'min'}=$2;
		}elsif( $subckt{$1}->{'max'} < $2 ){
			$subckt{$1}->{'max'}=$2;
		}
		$subckt{$1}->{'bus'}=1;
		
	}else{
		$subckt{$name[0]}->{'direction'}=$name[1];
		$subckt{$name[0]}->{'bus'}=0;
		push(@pinlist,$name[0]);
	}
}
my %bustypelist;
my $bustypecounter=0;
foreach my $item (keys(%subckt)){
	if (exists( $subckt{$item}->{'min'} ) ){
		$bustypelist{"BUSTYPE${subckt{$item}->{'max'}}_${subckt{$item}->{'min'}}"}=
			[$subckt{$item}->{'max'},$subckt{$item}->{'min'},$subckt{$item}->{'max'}-$subckt{$item}->{'min'}+1];
		$bustypecounter++;
	}
}
print "total $bustypecounter bustype\n";
my $typedefine="\n";
foreach my $item(keys(%bustypelist)){
	$typedefine=$typedefine.<<HERE;
	type ($item) {
		base_type : array ;
		data_type : bit ;
		bit_width : $bustypelist{$item}->[2];
		bit_from : $bustypelist{$item}->[0];
		bit_to : $bustypelist{$item}->[1] ;
		downto : true ;
	} 
HERE
}
	
@pinlist=sort(@pinlist);
my $type='';
my $i;
my @anainpinlist, my @anaoutpinlist,my @anainoutpinlist; 
my @digitalnotimingpinlist;
my @digitaltiminginpinlist,my @digitaltimingoutpinlist,my @digitaltiminginoutpinlist;
my @clkpinlist;
my %typemap=('1'=>'A','2'=>'D','3'=>'D','4'=>'clk');
for( $i=0;$i<@pinlist;$i++){
	if( $subckt{$pinlist[$i]}->{'direction'} eq 'B' ){
		print " pin(bus) $pinlist[$i] is 1.(*) Analog 2. digital no timing 3. digital need timing 4. clk ?select one \n";
	}else{
		print " pin(bus) $pinlist[$i] is 1. Analog 2.(*) digital no timing 3. digital need timing 4. clk ?select one \n";
	}
	chomp($type=<STDIN>);
	my $count=0;
	while( $type ne '1' and $type ne '2' and $type ne '3' and $type ne '4' and $type ne '' and $count<5){
		print "please enter 1 , 2, 3, 4\n";
		chomp($type=<STDIN>);
		$count++;
	}
	if( $type eq '' or $count>=5 ) {
		if( $subckt{$pinlist[$i]}->{'direction'} eq 'B' ){
			$type=1;
		}else{
			$type=2;
		}
	}
	if( $type eq '4' ) {
		print "use $pinlist[$i] as clk name\n";
		$clkname=$pinlist[$i];
	}
	if( $type eq '1' ){
		if ($subckt{$pinlist[$i]}->{'direction'} eq 'B'){
			push(@anainoutpinlist, $pinlist[$i]);
		}elsif($subckt{$pinlist[$i]}->{'direction'} eq 'I'){
			push(@anainpinlist, $pinlist[$i]);
		}elsif($subckt{$pinlist[$i]}->{'direction'} eq 'O'){
			push(@anaoutpinlist, $pinlist[$i]);
		}
	}elsif( $type eq '2'){
		push(@digitalnotimingpinlist,$pinlist[$i]);
	}elsif( $type eq '3'){
		if ($subckt{$pinlist[$i]}->{'direction'} eq 'B'){
			push(@digitaltiminginoutpinlist, $pinlist[$i]);
		}elsif($subckt{$pinlist[$i]}->{'direction'} eq 'I'){
			push(@digitaltiminginpinlist, $pinlist[$i]);
		}elsif($subckt{$pinlist[$i]}->{'direction'} eq 'O'){
			push(@digitaltimingoutpinlist, $pinlist[$i]);
		} 
		
	}elsif( $type eq '4'){
		push(@clkpinlist,$pinlist[$i]);
	}else {
		print "Warning, no type for $pinlist[$i]\n";
	}
	$subckt{$pinlist[$i]}->{'type'}=$type;
}
@pinlist=(@anainoutpinlist,@anainpinlist,@anaoutpinlist,
			@clkpinlist,@digitalnotimingpinlist,
			@digitaltiminginoutpinlist,@digitaltiminginpinlist,@digitaltimingoutpinlist);
open FILE, "> $subckt.lib";
print FILE <<LIBHEAD;
/* start of lib */
/* generated by software of gaojun */
library( $subckt ) {
	/* add lib head here */
	$libhead
	$typedefine
	/* finish lib head */
	cell( $subckt ) {
		/* add cell head here */
		$cellhead
		/* finish cell head */
LIBHEAD
my %dirmap=('I'=>'input','O'=>'output','B'=>'inout');
my %dirmap1=('I'=>'i','O'=>'o','B'=>'io');
for(my $i=0;$i<@pinlist;$i++){
	if( exists( $subckt{$pinlist[$i]}->{'min'} ) ){
		print FILE <<HERE;
		bus( $pinlist[$i] ){
			bus_type : BUSTYPE$subckt{$pinlist[$i]}->{'max'}_$subckt{$pinlist[$i]}->{'min'};
HERE
	}else{
		print FILE <<HERE;
		pin( $pinlist[$i] ){
HERE
	}
	
	print FILE <<HERE;
			direction : $dirmap{$subckt{$pinlist[$i]}->{'direction'}};
			$pinhead
HERE
	if( $subckt{$pinlist[$i]}->{'type'} eq '1' ){ #analog
		print FILE $anahead;
	}elsif(  $subckt{$pinlist[$i]}->{'type'} eq '2'  ){ #notiming
		print FILE $notiminghead;
	}elsif( $subckt{$pinlist[$i]}->{'type'} eq '3'  and $subckt{$pinlist[$i]}->{'direction'} eq 'I'){
		print FILE $timinginhead;
	}elsif( $subckt{$pinlist[$i]}->{'type'} eq '3'  and $subckt{$pinlist[$i]}->{'direction'} eq 'O'){
		print FILE $timingouthead;
	}elsif( $subckt{$pinlist[$i]}->{'type'} eq '4' ){ #clk
		print FILE $clkhead;
	}else{
		print " Warning, no match\n";
	}	
	print FILE "		}\n";
}	


print FILE <<LIBFOOT;
	}/* end of cell*/
}/* end of lib*/
LIBFOOT
close FILE;

open FILE, "> $subckt.v";
print FILE <<HEAD;
module $subckt(
HEAD
for(my $i=0;$i<@pinlist;$i++){
	my $ending=',';
	if ($i==@pinlist-1){ $ending='';}
	print FILE <<PIN;
	$pinlist[$i] $ending // $typemap{$subckt{$pinlist[$i]}->{'type'}} $dirmap{$subckt{$pinlist[$i]}->{'direction'}}
PIN
}
print FILE ");\n";
for(my $i=0;$i<@pinlist;$i++){
	if( !exists($subckt{$pinlist[$i]}->{'min'}) ){
		print FILE <<PIN;
$dirmap{$subckt{$pinlist[$i]}->{'direction'}}	$pinlist[$i] ; 
PIN
	}else{
		print FILE <<PIN;
$dirmap{$subckt{$pinlist[$i]}->{'direction'}} [$subckt{$pinlist[$i]}->{'max'}:$subckt{$pinlist[$i]}->{'min'}] 	$pinlist[$i] ; 
PIN
	}
}
close(FILE);
open FILE,"> $subckt.list";
print FILE<<HEAD;
Name	Type	Note
HEAD
for(my $i=0;$i<@pinlist;$i++){
	if( !exists($subckt{$pinlist[$i]}->{'min'}) ){
		print FILE <<PIN;
$pinlist[$i]	$typemap{$subckt{$pinlist[$i]}->{'type'}}/$dirmap1{$subckt{$pinlist[$i]}->{'direction'}}	Note:
PIN
	}else{
		print FILE <<PIN;
$pinlist[$i] [$subckt{$pinlist[$i]}->{'max'}:$subckt{$pinlist[$i]}->{'min'}]	$typemap{$subckt{$pinlist[$i]}->{'type'}}/$dirmap1{$subckt{$pinlist[$i]}->{'direction'}}	Note:
PIN
	}
}


		
		


		
	
	
